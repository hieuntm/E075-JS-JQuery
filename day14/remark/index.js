// A v√† B ƒëang nghi√™n c·ª©u v·ªÅ lo√†i ch√≥. V√¨ v·∫≠y, m·ªói ng∆∞·ªùi trong s·ªë h·ªç ƒë√£ h·ªèi 5 ng∆∞·ªùi nu√¥i ch√≥ v·ªÅ tu·ªïi con ch√≥ c·ªßa h·ªç v√† 
// l∆∞u tr·ªØ d·ªØ li·ªáu v√†o m·ªôt m·∫£ng (m·ªói m·∫£ng m·ªôt m·∫£ng). Hi·ªán t·∫°i, h·ªç ch·ªâ quan t√¢m ƒë·∫øn vi·ªác bi·∫øt m·ªôt con ch√≥ l√† ch√≥ tr∆∞·ªüng 
// th√†nh hay ch√≥ con. M·ªôt con ch√≥ ƒë∆∞·ª£c coi l√† tr∆∞·ªüng th√†nh n·∫øu n√≥ √≠t nh·∫•t 3 tu·ªïi v√† l√† ch√≥ con n·∫øu n√≥ d∆∞·ªõi 3 tu·ªïi.

// T·∫°o h√†m 'checkDogs', ch·∫•p nh·∫≠n 2 m·∫£ng ƒë·ªô tu·ªïi c·ªßa ch√≥ ('dogsA' v√† 'dogsB') v√† th·ª±c hi·ªán nh·ªØng vi·ªác sau:

// 1. A ph√°t hi·ªán ra r·∫±ng ch·ªß nh√¢n c·ªßa con ch√≥ ƒê·∫¶U TI√äN v√† HAI Con Ch√≥ CU·ªêI C√ôNG th·ª±c ra nu√¥i m√®o ch·ª© kh√¥ng 
// ph·∫£i ch√≥! V√¨ v·∫≠y, h√£y t·∫°o m·ªôt b·∫£n sao trong m·∫£ng c·ªßa A v√† x√≥a ph·∫ßn t·ª≠ ƒë·∫ßu v√† cu·ªëi ra kh·ªèi m·∫£ng ƒë∆∞·ª£c sao ch√©p ƒë√≥
// 2. T·∫°o m·ªôt m·∫£ng c√≥ c·∫£ d·ªØ li·ªáu c·ªßa A (ƒë√£ s·ª≠a) v√† c·ªßa B
// 3. ƒê·ªëi v·ªõi m·ªói ch√∫ ch√≥ c√≤n l·∫°i, console.log ra m√†n h√¨nh d√π ƒë√≥ l√† ch√≥ tr∆∞·ªüng th√†nh 
// ("Ch√≥ s·ªë <index> ƒë√£ tr∆∞·ªüng th√†nh v√† 5 tu·ªïi") hay ch√≥ con ("Ch√≥ s·ªë 2 v·∫´n l√† ch√≥ con üê∂")
// 4. Ch·∫°y h√†m cho c·∫£ hai t·∫≠p d·ªØ li·ªáu th·ª≠ nghi·ªám

// G·ª¢I √ù: S·ª≠ d·ª•ng c√°c c√¥ng c·ª• t·ª´ t·∫•t c·∫£ c√°c b√†i gi·∫£ng trong ph·∫ßn n√†y cho ƒë·∫øn nay üòâ

// D·ªÆ LI·ªÜU KI·ªÇM TRA 1: D·ªØ li·ªáu c·ªßa A [3, 5, 2, 12, 7], d·ªØ li·ªáu c·ªßa B [4, 1, 15, 8, 3]
// D·ªÆ LI·ªÜU KI·ªÇM TRA 2: D·ªØ li·ªáu c·ªßa A [9, 16, 6, 8, 3], d·ªØ li·ªáu c·ªßa B [10, 5, 6, 1, 4]

// => 1. X√≥a d·ªØ li·ªáu ·ªü A[0] A[size-1] A[size-2]
//             0  1  2  3   4


// const dogsA = [3, 5, 2, 12, 7];
// const dogsB = [4, 1, 15, 8, 3];
// dogsA.splice(0, 1);//=> X√≥a ·∫£nh h∆∞·ªüng m·∫£ng g·ªëc => [5, 2, 12, 7];

// const x2 = array.slice(1, 3); // => c√°ch 1
// console.log("slice: ", x2, array);
// const x = array.splice(1, 2);
// console.log("splice: ", x, array);

// const x2 = dogsB.slice(1, 3); // => c√°ch 1
// console.log("slice: ", x2, dogsA);

// const x = dogsA.splice(1, 2);
// console.log("splice: ", x, dogsA);

// DATA1
const dogsA = [3, 5, 2, 12, 7];
const dogsB = [4, 1, 15, 8, 3];

// DATA2
// const dogsA = [9, 16, 6, 8, 3]
// const dogsB = [10, 5, 6, 1, 4]
// function cutArray(array){
//     const x2 = array.slice(1, 3); // => c√°ch 1
//     console.log("slice: ", x2, array);
//     const x = array.splice(1, 2);
//     console.log("splice: ", x, array);
// }

// const cutArray = (array) => {
//     const x2 = array.slice(1, 3); // => c√°ch 1
//     console.log("slice: ", x2, array);
//     const x = array.splice(1, 2);
//     console.log("splice: ", x, array);
// }

// cutArray(dogsA);

const cutArrayAndCombile = (array1, array2) => {
    // const x2 = array1.slice(1, 3);
    // return [...x2, ...array2];

    return [...array1.slice(1, 3), ...array2];
}

const dogs = cutArrayAndCombile(dogsA, dogsB);
console.log(dogs);

dogs.map((dog, index) => {
    if(dog > 3){
        console.log("Ch√≥ "+index+" tr∆∞·ªüng th√†nh");
    } else {
        console.log("Ch√≥ "+index+" ch∆∞a tr∆∞·ªüng th√†nh")
    }
})


// Ch√∫ng ta h√£y quay tr·ªü l·∫°i nghi√™n c·ª©u c·ªßa A v√† B v·ªÅ lo√†i ch√≥. L·∫ßn n√†y, h·ªç mu·ªën chuy·ªÉn ƒë·ªïi tu·ªïi c·ªßa ch√≥ sang tu·ªïi c·ªßa con ng∆∞·ªùi v√† t√≠nh 
// tu·ªïi trung b√¨nh c·ªßa nh·ªØng con ch√≥ trong nghi√™n c·ª©u c·ªßa h·ªç.

// T·∫°o h√†m 'calcAverageHumanAge', ch·∫•p nh·∫≠n m·ªôt m·∫£ng ƒë·ªô tu·ªïi c·ªßa ch√≥ ('ages') v√† th·ª±c hi·ªán nh·ªØng vi·ªác sau theo th·ª© t·ª±:

// 1. T√≠nh tu·ªïi ch√≥ theo nƒÉm c·ªßa con ng∆∞·ªùi b·∫±ng c√¥ng th·ª©c sau: n·∫øu ch√≥ <= 2 tu·ªïi th√¨ humanAge = 2 * dogAge. N·∫øu ch√≥ > 2 tu·ªïi, 
// humanAge = 16 + dogAge * 4.
// 2. Lo·∫°i tr·ª´ t·∫•t c·∫£ nh·ªØng con ch√≥ d∆∞·ªõi 18 tu·ªïi
// 3. T√≠nh tu·ªïi trung b√¨nh c·ªßa t·∫•t c·∫£ ch√≥ tr∆∞·ªüng th√†nh => Reduce 
// 4. Ch·∫°y h√†m cho c·∫£ hai t·∫≠p d·ªØ li·ªáu th·ª≠ nghi·ªám

// D·ªÆ LI·ªÜU KI·ªÇM TRA 1: [5, 2, 4, 1, 15, 8, 3]
// D·ªÆ LI·ªÜU KI·ªÇM TRA 2: [16, 6, 10, 5, 6, 1, 4]

// const dogs1 =  [5, 2, 4, 1, 15, 8, 3];
const dogs1 =  [16, 6, 10, 5, 6, 1, 4];

const newDogs = dogs1.map(dog => dog >= 2 ? dog * 4 + 16 : dog *2);
console.log(newDogs)

const filterDogs = newDogs.filter(dog => dog > 18);
console.log(filterDogs)

const averageAge = filterDogs.reduce((acc, curr, index, array) => acc + curr/array.length, 0);
console.log(averageAge)

// Vi·∫øt l·∫°i h√†m 'calcAverageHumanAge' t·ª´ th·ª≠ th√°ch tr∆∞·ªõc, nh∆∞ng l·∫ßn n√†y d∆∞·ªõi d·∫°ng h√†m m≈©i t√™n v√† s·ª≠ d·ª•ng chain!

// D·ªÆ LI·ªÜU KI·ªÇM TRA 1: [5, 2, 4, 1, 15, 8, 3]
// D·ªÆ LI·ªÜU KI·ªÇM TRA 2: [16, 6, 10, 5, 6, 1, 4]

const averageAgeFastestWay = dogs1.map(dog => dog >= 2 ? dog * 4 + 16 : dog *2)
    .filter(dog => dog > 18)
    .reduce((acc, curr, index, array) => acc + curr/array.length, 0)
console.log("Bt3: ", averageAgeFastestWay)

// 
function template(array){ // array l√† tham s·ªë truy·ªÅn v√†o
    return array.map(dog => dog >= 2 ? dog * 4 + 16 : dog *2)
    .filter(dog => dog > 18)
    .reduce((acc, curr, index, array) => acc + curr/array.length, 0); // Tu·ªïi trung b√¨nh
}

const averageAgeFromFunction = template(dogs1);
console.log("Bt3.1: ", averageAgeFromFunction)

const dogs2 =  [16, 6, 10, 5, 6, 1, 4, 15, 20, 1, 5, 7, 6, 9, 32, 4, 6, 7, 8, 13, 10];
const averageAgeFromFunction2 = template(dogs2);
console.log("Bt3.2: ", averageAgeFromFunction2)



